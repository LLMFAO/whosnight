To the Replit Agent:
I'm developing an Expo (React Native) iOS app, and I want to implement "Sign In with Apple" for authentication. This is crucial for App Store compliance if I offer other third-party logins.
Here's a high-level overview of what "Sign In with Apple" is and how it generally works with Expo. I need you to help me set up the basic client-side code for this.
Understanding "Sign In with Apple":
"Sign In with Apple" is a privacy-focused authentication method provided by Apple. It allows users to log in using their Apple ID, often with Face ID or Touch ID, providing a secure and convenient experience.
Key Components & Flow:
 * expo-apple-authentication Library: This is the primary Expo library we'll use. It wraps the native iOS APIs for "Sign In with Apple".
   * Action Needed from Agent: Please ensure this library is installed in the project. The command is expo install expo-apple-authentication.
 * app.json Configuration: For "Sign In with Apple" to work correctly on iOS, we need to enable a specific capability in the app.json file.
   * Action Needed from Agent: In the expo.ios section of app.json, set usesAppleSignIn to true. Also, ensure expo-apple-authentication is listed in the plugins array.
   {
  "expo": {
    "ios": {
      "usesAppleSignIn": true
    },
    "plugins": [
      "expo-apple-authentication"
    ]
  }
}

   (Note for Agent: This plugin handles the native Xcode setup when building with EAS.)
 * UI Component (AppleAuthenticationButton): expo-apple-authentication provides a ready-to-use button component that follows Apple's design guidelines.
   * Action Needed from Agent: Generate a simple React Native component or add to an existing screen that includes AppleAuthentication.AppleAuthenticationButton. Make sure it has buttonType (e.g., SIGN_IN) and buttonStyle (e.g., BLACK or WHITE).
 * Authentication Logic (signInAsync): When the button is pressed, we call the signInAsync method from the expo-apple-authentication library. This method will trigger the native Apple Sign In flow.
   * Action Needed from Agent: Implement an onPress handler for the AppleAuthenticationButton that calls AppleAuthentication.signInAsync.
   * Requested Scopes: For a basic setup, request FULL_NAME and EMAIL scopes.
   * Output: The signInAsync call will return a credential object. This object will contain important information like identityToken (a JWT), authorizationCode, and the unique user identifier.
   * Initial Handling: For now, just console.log the credential object so I can see the data returned.
Example Code Snippet (for your reference, Agent):
import React from 'react';
import { View, StyleSheet, Text } from 'react-native';
import * as AppleAuthentication from 'expo-apple-authentication';

export default function AppleSignInScreen() {

  const handleAppleSignIn = async () => {
    try {
      const credential = await AppleAuthentication.signInAsync({
        requestedScopes: [
          AppleAuthentication.AppleAuthenticationScope.FULL_NAME,
          AppleAuthentication.AppleAuthenticationScope.EMAIL,
        ],
      });

      console.log('Apple Sign In Credential:', credential);
      // In a real app, you would send credential.identityToken
      // and credential.authorizationCode to your backend for verification.

      // You might also want to store credential.user securely using expo-secure-store
      // for future use to identify the user.

    } catch (e) {
      if (e.code === 'ERR_CANCELED') {
        console.log('User cancelled Apple Sign In process.');
      } else {
        console.error('An error occurred during Apple Sign In:', e);
      }
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Sign In to My App</Text>
      {AppleAuthentication.isAvailableAsync() ? (
        <AppleAuthentication.AppleAuthenticationButton
          buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}
          buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}
          cornerRadius={5}
          style={styles.appleButton}
          onPress={handleAppleSignIn}
        />
      ) : (
        <Text>Sign In with Apple is not available on this device.</Text>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
    backgroundColor: '#f5f5f5',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 40,
  },
  appleButton: {
    width: 200,
    height: 44,
  },
});

What the Agent Likely Cannot Do (and I will handle externally):
 * Apple Developer Account Setup: The Agent cannot access or configure my Apple Developer account. I will manually set up the "Sign In with Apple" capability for my App ID and generate the necessary Key in the Apple Developer console.
 * Backend Verification: The Agent cannot create or manage my backend server. I will handle sending the identityToken and authorizationCode to my own backend for secure verification and user account management.
 * Secure Storage (beyond simple console.log): While expo-secure-store is for secure storage, for this initial request, just logging the credential is fine. I will integrate expo-secure-store myself if the Agent struggles with it.
 * EAS Build Execution: The Agent will likely not execute the EAS build process that fully incorporates the native capabilities. I will run eas build myself after the code changes.
Please proceed with setting up the client-side Expo React Native code for Apple authentication based on these instructions.
